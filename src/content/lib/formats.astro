---
import {resource, delimiter, type Parameter} from './parameters.ts';
import type { HTMLAttributes } from 'astro/types'


function createFormats<T extends Record<K, Format>, K extends string>(o: T) {
  return o
}
interface Format {
    name: string,
    description: string,
    parameters: Parameter[],
}

// Import only & Export only parameters
// Code: HTML oder backticks ersetzen durch <code><> oder Markdown processor in Astro

export const formats = createFormats({
    csv : {
        name: 'csv',
        description: 'Comma-separated values.',
        parameters: [resource, delimiter],
    },
    dsv: {
        name: 'dsv',
        description: 'Delimited separated values.',
        parameters: [delimiter],
    },
});


interface Props extends HTMLAttributes<'p'> {
  of: keyof typeof formats
}
const { of, ...props } = Astro.props; // Get the 'of' prop (like 'csv' or 'dsv')
const format: Format = formats[of]; // Access the correct format object based on 'of'
---

<p {...props}>
  {format.parameters.map((param, index) => (
    <span key={index} class="block">{param.name}</span>
  ))}</p>